# coding: utf-8

"""
    CDP Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from customer.models.customer_create_consent_request import CustomerCreateConsentRequest
from customer.models.customer_em_fields import CustomerEMFields
from customer.models.customer_newsletter_request import CustomerNewsletterRequest
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CustomerSubscriberRequest(BaseModel):
    """
    CustomerSubscriberRequest
    """ # noqa: E501
    name: Optional[StrictStr] = None
    lastname: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    gender: Optional[StrictStr] = None
    birthdate: Optional[datetime] = None
    nationality: Optional[StrictStr] = None
    em: Optional[CustomerEMFields] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    newsletters: Optional[List[CustomerNewsletterRequest]] = None
    market: Optional[StrictStr] = None
    preferred_locale: Optional[StrictStr] = Field(default=None, alias="preferredLocale")
    consent: Optional[CustomerCreateConsentRequest] = None
    __properties: ClassVar[List[str]] = ["name", "lastname", "email", "country", "gender", "birthdate", "nationality", "em", "createdAt", "updatedAt", "newsletters", "market", "preferredLocale", "consent"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CustomerSubscriberRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of em
        if self.em:
            _dict['em'] = self.em.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in newsletters (list)
        _items = []
        if self.newsletters:
            for _item in self.newsletters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['newsletters'] = _items
        # override the default output from pydantic by calling `to_dict()` of consent
        if self.consent:
            _dict['consent'] = self.consent.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CustomerSubscriberRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "lastname": obj.get("lastname"),
            "email": obj.get("email"),
            "country": obj.get("country"),
            "gender": obj.get("gender"),
            "birthdate": obj.get("birthdate"),
            "nationality": obj.get("nationality"),
            "em": CustomerEMFields.from_dict(obj.get("em")) if obj.get("em") is not None else None,
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "newsletters": [CustomerNewsletterRequest.from_dict(_item) for _item in obj.get("newsletters")] if obj.get("newsletters") is not None else None,
            "market": obj.get("market"),
            "preferredLocale": obj.get("preferredLocale"),
            "consent": CustomerCreateConsentRequest.from_dict(obj.get("consent")) if obj.get("consent") is not None else None
        })
        return _obj


