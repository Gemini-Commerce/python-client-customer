# coding: utf-8

"""
    CDP Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from customer.models.customer_address_create_request_kind import CustomerAddressCreateRequestKind
from customer.models.customer_em_fields import CustomerEMFields
from customer.models.protobuf_any import ProtobufAny
from typing import Optional, Set
from typing_extensions import Self

class CustomerAddressCreateRequest(BaseModel):
    """
    CustomerAddressCreateRequest
    """ # noqa: E501
    tenant_id: Optional[StrictStr] = Field(default=None, alias="tenantId")
    customer_id: Optional[StrictStr] = Field(default=None, alias="customerId")
    em: Optional[CustomerEMFields] = None
    name: Optional[StrictStr] = None
    surname: Optional[StrictStr] = None
    street: Optional[StrictStr] = None
    number: Optional[StrictStr] = None
    zip: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    province: Optional[StrictStr] = None
    phone_number: Optional[StrictStr] = Field(default=None, alias="phoneNumber")
    fiscal_code: Optional[StrictStr] = Field(default=None, alias="fiscalCode")
    vat_number: Optional[StrictStr] = Field(default=None, alias="vatNumber")
    kind: Optional[CustomerAddressCreateRequestKind] = CustomerAddressCreateRequestKind.SHIPPING
    default: Optional[StrictBool] = None
    country: Optional[StrictStr] = None
    attributes: Optional[Dict[str, ProtobufAny]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["tenantId", "customerId", "em", "name", "surname", "street", "number", "zip", "city", "province", "phoneNumber", "fiscalCode", "vatNumber", "kind", "default", "country", "attributes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomerAddressCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of em
        if self.em:
            _dict['em'] = self.em.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in attributes (dict)
        _field_dict = {}
        if self.attributes:
            for _key_attributes in self.attributes:
                if self.attributes[_key_attributes]:
                    _field_dict[_key_attributes] = self.attributes[_key_attributes].to_dict()
            _dict['attributes'] = _field_dict
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomerAddressCreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tenantId": obj.get("tenantId"),
            "customerId": obj.get("customerId"),
            "em": CustomerEMFields.from_dict(obj["em"]) if obj.get("em") is not None else None,
            "name": obj.get("name"),
            "surname": obj.get("surname"),
            "street": obj.get("street"),
            "number": obj.get("number"),
            "zip": obj.get("zip"),
            "city": obj.get("city"),
            "province": obj.get("province"),
            "phoneNumber": obj.get("phoneNumber"),
            "fiscalCode": obj.get("fiscalCode"),
            "vatNumber": obj.get("vatNumber"),
            "kind": obj.get("kind") if obj.get("kind") is not None else CustomerAddressCreateRequestKind.SHIPPING,
            "default": obj.get("default"),
            "country": obj.get("country"),
            "attributes": dict(
                (_k, ProtobufAny.from_dict(_v))
                for _k, _v in obj["attributes"].items()
            )
            if obj.get("attributes") is not None
            else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


