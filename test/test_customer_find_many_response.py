# coding: utf-8

"""
    CDP Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from customer.models.customer_find_many_response import CustomerFindManyResponse

class TestCustomerFindManyResponse(unittest.TestCase):
    """CustomerFindManyResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CustomerFindManyResponse:
        """Test CustomerFindManyResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CustomerFindManyResponse`
        """
        model = CustomerFindManyResponse()
        if include_optional:
            return CustomerFindManyResponse(
                customers = [
                    customer.models.customer_customer_response.customerCustomerResponse(
                        em = customer.models.customer_em_fields.customerEMFields(
                            tenant_id = '', 
                            entity_type = '', 
                            entity_code = '', ), 
                        grn = '', 
                        id = '', 
                        name = '', 
                        surname = '', 
                        email = '', 
                        birthdate = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        gender = '', 
                        enabled = True, 
                        source = '', 
                        addresses = [
                            customer.models.customer_address_customer_response.customerAddressCustomerResponse(
                                grn = '', 
                                id = '', 
                                name = '', 
                                surname = '', 
                                street = '', 
                                number = '', 
                                zip = '', 
                                city = '', 
                                province = '', 
                                phone_number = '', 
                                fiscal_code = '', 
                                vat_number = '', 
                                kind = 'SHIPPING', 
                                default = True, 
                                country = '', 
                                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                attributes = {
                                    'key' : {
                                        'key' : None
                                        }
                                    }, )
                            ], 
                        default_billing_address_id = '', 
                        default_shipping_address_id = '', 
                        phone_number = '', 
                        nationality = '', 
                        preferred_locale = '', 
                        groups = [
                            ''
                            ], 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        deleted = True, 
                        deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        newsletters = [
                            customer.models.customer_newsletter_response.customerNewsletterResponse(
                                id = '', 
                                newsletter_grn = '', 
                                name = '', )
                            ], 
                        migrated_password = customer.models.customer_password.customerPassword(
                            data = {
                                'key' : ''
                                }, 
                            enabled = True, 
                            type = 'PASSWORD_TYPE_UNKNOWN', ), 
                        attributes = {
                            'key' : {
                                'key' : None
                                }
                            }, 
                        tax_code = '', 
                        certified_email = '', 
                        sdi_code = '', 
                        fiscal_code = '', 
                        company_name = '', 
                        additional_info = customer.models.additional_info.additionalInfo(), 
                        market = '', 
                        permissions = [
                            'PERMISSION_UNKNOWN'
                            ], 
                        external_ids = {
                            'key' : ''
                            }, 
                        agent_grn = '', 
                        aggregation_id = '', )
                    ],
                next_page_token = ''
            )
        else:
            return CustomerFindManyResponse(
        )
        """

    def testCustomerFindManyResponse(self):
        """Test CustomerFindManyResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
